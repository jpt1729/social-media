// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// User Models
model User {
    id            String    @id @default(cuid())
    name          String?
    username      String?   @unique
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    followers Follow[] @relation("UserFollowers")
    following Follow[] @relation("UserFollowing")
}

model Follow {
    id          String   @id @default(cuid())
    follower    User     @relation("UserFollowers", fields: [followerId], references: [id])
    followerId  String
    following   User     @relation("UserFollowing", fields: [followingId], references: [id])
    followingId String
    createdAt   DateTime @default(now())
}

// Post Models
model Analytics {
    id         String   @id @default(cuid())
    createdAt  DateTime @default(now())
    finishedAt DateTime @default(now())
    actions    Int      @default(0)
    postId     String
    post       Post     @relation("PostAnalytics", fields: [postId], references: [id])
}

model Post {
    id           String    @id @default(cuid())
    createdAt    DateTime  @default(now())
    lastEditedAt DateTime?
    content      String?
    public       Boolean   @default(false)
    deleted      Boolean   @default(false)
    analytics    Analytics[] @relation("PostAnalytics")
}

